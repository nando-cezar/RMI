version: "3.8"

services:
  replication_server:
    build:
      context: replication
      dockerfile: Dockerfile
    container_name: replication_server
    depends_on:
      - rabbitmq
    env_file:
      - replication/.env-dockerfile
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  consumer1:
    build:
      context: consumer1
      dockerfile: Dockerfile
    container_name: consumer1
    depends_on:
      - replication_server
      - consumer1_db
      - rabbitmq
    env_file:
      - consumer1/.env-dockerfile
    ports:
      - "8081:8081"

  consumer1_db:
    image: postgres:13
    container_name: consumer1_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: data_db
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # Porta para conex√µes AMQP
      - "15672:15672" # Porta para a interface de gerenciamento
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

volumes:
  postgres_data: